/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios;

import Objetos.restaurante;
import Objetos.usuario;
import bd.ConexionBD;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author norberto
 */
public class frmSeleccionarRestaurante extends javax.swing.JFrame {

    /**
     * Creates new form frmRestaurante
     */
    public frmSeleccionarRestaurante() {
        initComponents();
        btSeleccionar.enable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbConsultaRestaurante = new javax.swing.JComboBox<>();
        tfdescripcion = new javax.swing.JTextField();
        btConsultar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbRestaurante = new javax.swing.JTable();
        btSeleccionar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mantenimiento Productos - Seleccion de Restaurante");

        cbConsultaRestaurante.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Nombre", "Ubicacion" }));

        tfdescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfdescripcionActionPerformed(evt);
            }
        });

        btConsultar.setText("Consultar");
        btConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultarActionPerformed(evt);
            }
        });

        tbRestaurante.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Nombre", "Ubicacion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbRestaurante);

        btSeleccionar.setText("Seleccionar");
        btSeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSeleccionarActionPerformed(evt);
            }
        });

        jLabel1.setText("Descripcion:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addComponent(btSeleccionar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbConsultaRestaurante, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfdescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btConsultar)))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbConsultaRestaurante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfdescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btConsultar)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btSeleccionar)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfdescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfdescripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfdescripcionActionPerformed

    private void btConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsultarActionPerformed
        // TODO add your handling code here:
        if (formularioConsultaValido()){
            consultarRegistroR();
        }
    }//GEN-LAST:event_btConsultarActionPerformed

    private void btSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSeleccionarActionPerformed
        if(seleccionValida()){
            int fila = tbRestaurante.getSelectedRow();
            
            int id = Integer.parseInt(tbRestaurante.getValueAt(fila,0).toString());
            String nombre = tbRestaurante.getValueAt(fila,1).toString();
            String ubi = tbRestaurante.getValueAt(fila,2).toString();
            
            restaurante r = new restaurante(id, nombre, ubi);
            
            frmProducto mantpro = new frmProducto(r);
            mantpro.setVisible(true);
        }else{
            consultarRegistroR();
        }
        consultarRegistroR();
    }//GEN-LAST:event_btSeleccionarActionPerformed

    /**
     * @param args the command line arguments
     */

    public void consultarRegistroR(){
        String tipo = cbConsultaRestaurante.getSelectedItem().toString();
        String descripcion = tfdescripcion.getText();
        //consultar
        try{
            //cunsolta a la base
            try{
                ConexionBD c = new ConexionBD();
                c.conectar();
                
                ArrayList<restaurante> registro = c.consultarRestaurante("","restaurante");
                ArrayList<restaurante> resultado = new ArrayList<restaurante>();
                
                //Consultar tipo y descripcion
                if (tipo.equals("Todos")){
                        resultado = registro;
                }else{
                    for (restaurante r1:registro){
                        if(tipo.equals("Nombre")&&(descripcion.length()>0)){
                            if(r1.getNombre().toUpperCase().contains(descripcion.toUpperCase())){
                                resultado.add(r1);
                            }
                        }else if(tipo.equals("Ubicacion")&&(descripcion.length()>0)){
                            if(r1.getUbicacion().toUpperCase().contains(descripcion.toUpperCase())){
                                resultado.add(r1);
                            }
                        }else if(tipo.equals("Descripcion")&&(descripcion.length()>0)){
                            if(r1.getDescripcion().toUpperCase().contains(descripcion.toUpperCase())){
                                resultado.add(r1);
                            }
                        }else if(tipo.equals("Capacidad")&&(descripcion.length()>0)){
                            if(String.valueOf(r1.getCapacidad()).contains(descripcion)){
                                resultado.add(r1);
                            }
                        }else if(tipo.equals("Horario")&&(descripcion.length()>0)){
                            if(r1.getHorario().toUpperCase().contains(descripcion.toUpperCase())){
                                resultado.add(r1);
                            }
                        }else if(tipo.equals("Puntuacion")&&(descripcion.length()>0)){
                            if(String.valueOf(r1.getCapacidad()).equals(descripcion)){
                                resultado.add(r1);
                            }
                        }else{
                            JOptionPane.showMessageDialog(this,"Descripcion vacia.","Consulta Invalida",JOptionPane.ERROR_MESSAGE);
                            break;
                        }
                    }
                }
                
                DefaultTableModel dtm = (DefaultTableModel)tbRestaurante.getModel();
                dtm.setRowCount(0);
                
                //recorriendo base de datos for
                for (restaurante res:resultado){
                    Object[] fila = new Object[3];
                    fila[0] = res.getId();
                    fila[1] = res.getNombre();
                    fila[2] = res.getUbicacion();
                    //fila[3] = res.getDescripcion();
                    //fila[4] = res.getCapacidad();
                    //fila[5] = res.getHorario();
                    //fila[6] = res.getPuntuacion();
                    dtm.addRow(fila);
                }
            c.desconectar();
            }catch (Exception e){
                System.out.println("error al consultar restaurantes");
            }
        }catch (Exception e){
            JOptionPane.showMessageDialog(this,"Ocurrió un error al consultar los registros","Consulta",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private boolean formularioConsultaValido(){
        String tipo = cbConsultaRestaurante.getSelectedItem().toString();
        String descripcion = tfdescripcion.getText();
        if(tipo.equals("Nombre") && descripcion.equals("")){
                JOptionPane.showMessageDialog(this,"Debe ingresar un número","Consulta",JOptionPane.ERROR_MESSAGE);
                return false;
        }else if(tipo.equals("Ubicacion") && descripcion.equals("")){
                JOptionPane.showMessageDialog(this,"Debe ingresar un Nombre","Consulta",JOptionPane.ERROR_MESSAGE);
                return false;
        }
        return true;
    }
    
    /*
    private boolean seleccionEliminacionValida(){ 
        int n = tbRestaurante.getSelectedRowCount();
        if(n==0){
            JOptionPane.showMessageDialog(this,"Debe seleccionar mínimo un registro para eliminar","Eliminación",JOptionPane.ERROR_MESSAGE);
            return false;        
        }
        int op = JOptionPane.showConfirmDialog(this, "Está seguro de eliminar los registros seleccionados?","Eliminación",JOptionPane.YES_NO_OPTION);
        if(op==0)
            return true;
        else
            return false;
    }
    */
    
    //funcion para establecer seleccion valida al momento de seleccionar un registro
    private boolean seleccionValida(){ 
        int n = tbRestaurante.getSelectedRowCount();
        if(n==0){
            JOptionPane.showMessageDialog(this,"Debe seleccionar mínimo un registro.","Seleccion",JOptionPane.ERROR_MESSAGE);
            return false;        
        }
        return true;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConsultar;
    private javax.swing.JButton btSeleccionar;
    private javax.swing.JComboBox<String> cbConsultaRestaurante;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbRestaurante;
    private javax.swing.JTextField tfdescripcion;
    // End of variables declaration//GEN-END:variables
}
